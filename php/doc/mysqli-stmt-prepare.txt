stmt->prepare -- Prepare a SQL statement for execution

Procedure style:

  bool mysqli_stmt_prepare(mysqli_stmt stmt, string query)~

Object oriented style (method)

  mixed prepare(mysqli_stmt stmt, string query, string query)~

|mysqli_stmt_prepare| prepares the SQL query pointed to by the null-terminated
string query. The statement object has to be allocated by |mysqli_stmt_init|.
The query must consist of a single SQL statement.

You should not add a terminating semicolon or \g to the statement.

The parameter {query} can include one or more parameter markers in the SQL
statement by embedding question mark (?) characters at the appropriate
positions.

The markers are legal only in certain places in SQL statements. For example,
they are allowed in the VALUES() list of an INSERT statement (to specify
column values for a row), or in a comparison with a column in a WHERE clause
to specify a comparison value.

However, they are not allowed for identifiers (such as table or column names),
in the select list that names the columns to be returned by a SELECT
statement), or to specify both operands of a binary operator such as the =
equal sign. The latter restriction is necessary because it would be
impossible to determine the parameter type. In general, parameters are legal
only in Data Manipulation Languange (DML) statements, and not in Data
Defination Language (DDL) statements.

The parameter markers must be bound to application variables using
|mysqli_stmt_bind_param| and/or |mysqli_stmt_bind_result| before executing
the statement or fetching rows.

Returns TRUE on success or FALSE on failure.

|mysqli_stmt_init|, |mysqli_stmt_execute|, |mysqli_stmt_fetch|,
|mysqli_stmt_bind_param|, |mysqli_stmt_bind_result| and |mysqli_stmt_close|.

Object oriented style

<?php >
  $mysqli = new mysqli("localhost", "my_user", "my_password", "world");
  
  /* check connection */
  if (mysqli_connect_errno()) {
      printf("Connect failed: %s\n", mysqli_connect_error());
      exit();
  }
  
  $city = "Amersfoort";
  
  /* create a prepared statement */
  $stmt =  $mysqli->stmt_init();
  if ($stmt->prepare("SELECT District FROM City WHERE Name=?")) {
  
      /* bind parameters for markers */
      $stmt->bind_param("s", $city);
  
      /* execute query */
      $stmt->execute();
  
      /* bind result variables */
      $stmt->bind_result($district);
  
      /* fetch value */
      $stmt->fetch();
  
      printf("%s is in district %s\n", $city, $district);
  
      /* close statement */
      $stmt->close();
  } 
  
  /* close connection */
  $mysqli->close();
?>

Procedural style

<?php >
  $link = mysqli_connect("localhost", "my_user", "my_password", "world");
  
  /* check connection */
  if (mysqli_connect_errno()) {
      printf("Connect failed: %s\n", mysqli_connect_error());
      exit();
  }
  
  $city = "Amersfoort";
  
  /* create a prepared statement */
  $stmt = mysqli_stmt_init();
  if ($stmt = mysqli_stmt_prepare($stmt, "SELECT District FROM City WHERE Name=?")) {
  
      /* bind parameters for markers */
      mysqli_stmt_bind_param($stmt, "s", $city);
  
      /* execute query */
      mysqli_stmt_execute($stmt);
  
      /* bind result variables */
      mysqli_stmt_bind_result($stmt, $district);
  
      /* fetch value */
      mysqli_stmt_fetch($stmt);
  
      printf("%s is in district %s\n", $city, $district);
  
      /* close statement */
      mysqli_stmt_close($stmt);
  } 
  
  /* close connection */
  mysqli_close($link);
?>

The above example will output:

  Amersfoort is in district Utrecht

vim:ft=help:
