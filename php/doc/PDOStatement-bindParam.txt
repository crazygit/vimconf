PDOStatement::bindParam -- Binds a parameter to the specified variable name

  bool PDOStatement::bindParam(mixed parameter, mixed variable [, int data_type [, int length [, mixed driver_options]]])~

This function is EXPERIMENTAL. The behaviour of this function, the name of
this function, and anything else documented about this function may change
without notice in a future release of PHP. Use this function at your own
risk.

Binds a parameter to a corresponding named or question mark placeholder in the
SQL statement that was use to prepare the statement.

Most parameters are input parameters, that is, parameters that are used in a
read-only fashion to build up the query. Some drivers support the invocation
of stored procedures that return data as output parameters, and some also as
input/output parameters that both send in data and are updated to receive it.

{parameter} Parameter identifier. For a prepared statement using named
placeholders, this will be a parameter name of the form :name. For a prepared
statement using question mark placeholders, this will be the 1-indexed
position of the parameter.

{variable} Name of the PHP variable to bind to the SQL statement parameter.

{data_type} Explicit data type for the parameter using the PDO_PARAM_*
constants. To return an INOUT parameter from a stored procedure, use the
bitwise OR operator to set the PDO_PARAM_INPUT_OUTPUT bits for the
{data_type} parameter.

{length} Length of the data type. To indicate that a parameter is an OUT
parameter from a stored procedure, you must explicitly set the length.

{driver_options}

Execute a prepared statement with named placeholders

<?php >
  /* Execute a prepared statement by binding PHP variables */
  $calories = 150;
  $colour = 'red';
  $sth = $dbh->prepare('SELECT name, colour, calories
      FROM fruit
      WHERE calories < :calories AND colour = :colour');
  $sth->bindParam(':calories', $calories, PDO_PARAM_INT);
  $sth->bindParam(':colour', $colour, PDO_PARAM_STR, 12);
  $sth->execute();
?>

Execute a prepared statement with question mark placeholders

<?php >
  /* Execute a prepared statement by binding PHP variables */
  $calories = 150;
  $colour = 'red';
  $sth = $dbh->prepare('SELECT name, colour, calories
      FROM fruit
      WHERE calories < ? AND colour = ?');
  $sth->bindParam(1, $calories, PDO_PARAM_INT);
  $sth->bindParam(2, $colour, PDO_PARAM_STR, 12);
  $sth->execute();
?>

Call a stored procedure with an INOUT parameter

<?php >
  /* Call a stored procedure with an INOUT parameter */
  $colour = 'red';
  $sth = $dbh->prepare('CALL puree_fruit(?)');
  $sth->bindParam(1, $colour, PDO_PARAM_STR|PDO_PARAM_INPUT_OUTPUT, 12);
  $sth->execute();
  print("After pureeing fruit, the colour is: $colour");
?>

|PDO::prepare| |PDOStatement::execute|

vim:ft=help:
