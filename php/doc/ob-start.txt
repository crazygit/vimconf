ob_start -- Turn on output buffering

  bool ob_start([callback output_callback [, int chunk_size [, bool erase]]])~

This function will turn output buffering on. While output buffering is active
no output is sent from the script (other than headers), instead the output is
stored in an internal buffer.

The contents of this internal buffer may be copied into a string variable
using |ob_get_contents|. To output what is stored in the internal buffer, use
|ob_end_flush|. Alternatively, |ob_end_clean| will silently discard the buffer
contents.

An optional {output_callback} function may be specified. This function takes a
string as a parameter and should return a string. The function will be called
when |ob_end_flush| is called, or when the output buffer is flushed to the
browser at the end of the request. When {output_callback} is called, it will
receive the contents of the output buffer as its parameter and is expected to
return a new output buffer as a result, which will be sent to the browser. If
the {output_callback} is not a callable function, this function will return
FALSE. If the callback function has two parameters, the second parameter is
filled with a bit-field consisting of PHP_OUTPUT_HANDLER_START,
PHP_OUTPUT_HANDLER_CONT and PHP_OUTPUT_HANDLER_END.

In PHP 4.0.4, |ob_gzhandler| was introduced to facilitate sending gz-encoded
data to web browsers that support compressed web pages. |ob_gzhandler|
determines what type of content encoding the browser will accept and will
return its output accordingly.

Before PHP 4.3.2 this function did not return FALSE in case the passed
{output_callback} can not be executed.

Some web servers (e.g. Apache) change the working directory of a script when
calling the callback function. You can change it back by e.g.
chdir(dirname($_SERVER['SCRIPT_FILENAME'])) in the callback function.

If the optional parameter {chunk_size} is passed, the callback function is
called on every first newline after {chunk_size} bytes of output. The
{output_callback} parameter may be bypassed by passing a NULL value.

If the optional parameter {erase} is set to FALSE, the buffer will not be
deleted until the script finishes (as of PHP 4.3.0).

Output buffers are stackable, that is, you may call |ob_start| while another
|ob_start| is active. Just make sure that you call |ob_end_flush| the
appropriate number of times. If multiple output callback functions are
active, output is being filtered sequentially through each of them in nesting
order.

|ob_end_clean|, |ob_end_flush|, |ob_clean|, |ob_flush| and |ob_start| may not
be called from a callback function. If you call them from callback function,
the behavior is undefined. If you would like to delete the contents of a
buffer, return "" (a null string) from callback function. You can't even call
functions using the output buffering functions like print_r($expression, true)
or highlight_file($filename, true) from a callback function.

User defined callback function example

<?php >
  function callback($buffer) 
  {
    // replace all the apples with oranges
    return (str_replace("apples", "oranges", $buffer));
  }
  
  ob_start("callback");
?>
  <html>
  <body>
  <p>It's like comparing apples to oranges.</p>
  </body>
  </html>
<?php >
  ob_end_flush();
?>

Would produce:

  <html>
  <body>
  <p>It's like comparing oranges to oranges.</p>
  </body>
  </html>

See also |ob_get_contents|, |ob_end_flush|, |ob_end_clean|,
|ob_implicit_flush|, |ob_gzhandler|, |ob_iconv_handler| |mb_output_handler|,
and |ob_tidyhandler|.

vim:ft=help:
