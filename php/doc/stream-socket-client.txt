stream_socket_client -- Open Internet or Unix domain socket connection

  resource stream_socket_client(string remote_socket [, int errno [, string errstr [, float timeout [, int flags [, resource context]]]]])~

Initiates a stream or datagram connection to the destination specified by
{remote_socket}. The type of socket created is determined by the transport
specified using standard URL formatting: transport://target. For Internet
Domain sockets (AF_INET) such as TCP and UDP, the target portion of the
{remote_socket} parameter should consist of a hostname or IP address followed
by a colon and a port number. For Unix domain sockets, the {target} portion
should point to the socket file on the filesystem. The optional {timeout} can
be used to set a timeout in seconds for the connect system call. {flags} is a
bitmask field which may be set to any combination of connection flags.
Currently the selection of connection flags is limited to
STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and
STREAM_CLIENT_PERSISTENT.

If you need to set a timeout for reading/writing data over the socket, use
|stream_set_timeout|, as the {timeout} parameter to |stream_socket_client|
only applies while connecting the socket.

|stream_socket_client| returns a stream resource which may be used together
with the other file functions (such as |fgets|, |fgetss|, |fwrite|, |fclose|,
and |feof|).

If the call fails, it will return FALSE and if the optional {errno} and
{errstr} arguments are present they will be set to indicate the actual system
level error that occurred in the system-level connect() call. If the value
returned in {errno} is 0 and the function returned FALSE, it is an indication
that the error occurred before the connect() call. This is most likely due to
a problem initializing the socket. Note that the {errno} and {errstr}
arguments will always be passed by reference.

Depending on the environment, the Unix domain or the optional connect timeout
may not be available. A list of available transports can be retrieved using
|stream_get_transports|. See for a list of built in transports.

The stream will by default be opened in blocking mode. You can switch it to
non-blocking mode by using |stream_set_blocking|. |stream_socket_client|
Example

<?php >
  $fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
  if (!$fp) {
      echo "$errstr ($errno)<br />\n";
  } else {
      fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
      while (!feof($fp)) {
          echo fgets($fp, 1024);
      }
      fclose($fp);
  }
?>

The example below shows how to retrieve the day and time from the UDP service
"daytime" (port 13) in your own machine. Using UDP connection

<?php >
  $fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
  if (!$fp) {
      echo "ERROR: $errno - $errstr<br />\n";
  } else {
      fwrite($fp, "\n");
      echo fread($fp, 26);
      fclose($fp);
  }
?>

UDP sockets will sometimes appear to have opened without an error, even if the
remote host is unreachable. The error will only become apparent when you read
or write data to/from the socket. The reason for this is because UDP is a
"connectionless" protocol, which means that the operating system does not try
to establish a link for the socket until it actually needs to send or receive
data.

When specifying a numerical IPv6 address (e.g. fe80::1) you must enclose the
IP in square brackets. For example, tcp://[fe80::1]:80.

See also |stream_socket_server|, |stream_set_blocking|, |stream_set_timeout|,
|stream_select|, |fgets|, |fgetss|, |fwrite|, |fclose|, |feof|, and the Curl
extension.

vim:ft=help:
