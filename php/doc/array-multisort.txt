array_multisort -- Sort multiple or multi-dimensional arrays

  bool array_multisort(array ar1 [, mixed arg [, mixed ... [, array ...]]])~

Returns TRUE on success or FALSE on failure.

|array_multisort| can be used to sort several arrays at once, or a
multi-dimensional array by one or more dimensions.

Associative (string) keys will be maintained, but numeric keys will be
re-indexed.

The input arrays are treated as columns of a table to be sorted by rows - this
resembles the functionality of SQL ORDER BY clause. The first array is the
primary one to sort by. The rows (values) in that array that compare the same
are sorted by the next input array, and so on.

The argument structure of this function is a bit unusual, but flexible. The
first argument has to be an array. Subsequently, each argument can be either
an array or a sorting flag from the following lists.

Sorting order flags: SORT_ASC - Sort in ascending order

SORT_DESC - Sort in descending order

Sorting type flags: SORT_REGULAR - Compare items normally

SORT_NUMERIC - Compare items numerically

SORT_STRING - Compare items as strings

No two sorting flags of the same type can be specified after each array. The
sorting flags specified after an array argument apply only to that array -
they are reset to default SORT_ASC and SORT_REGULAR before each new array
argument.

Sorting multiple arrays

<?php >
  $ar1 = array("10", 100, 100, "a");
  $ar2 = array(1, 3, "2", 1);
  array_multisort($ar1, $ar2);
  
  var_dump($ar1);
  var_dump($ar2);
?>

In this example, after sorting, the first array will contain "10", "a", 100,
100. The second array will contain 1, 1, "2", 3. The entries in the second
array corresponding to the identical entries in the first array (100 and 100)
were sorted as well.

  array(4) {
    [0]=> string(2) "10"
    [1]=> string(1) "a"
    [2]=> int(100)
    [3]=> int(100)
  }
  array(4) {
    [0]=> int(1)
    [1]=> int(1)
    [2]=> string(1) "2"
    [3]=> int(3)
  }

Sorting multi-dimensional array

<?php >
  $ar = array(
         array("10", 11, 100, 100, "a"), 
         array(   1,  2, "2",   3,   1)
        );
  array_multisort($ar[0], SORT_ASC, SORT_STRING,
                  $ar[1], SORT_NUMERIC, SORT_DESC);
  var_dump($ar);
?>

In this example, after sorting, the first array will transform to "10", 100,
100, 11, "a" (it was sorted as strings in ascending order). The second will
contain 1, 3, "2", 2, 1 (sorted as numbers, in descending order).

  array(2) {
    [0]=> array(5) {
      [0]=> string(2) "10"
      [1]=> int(100)
      [2]=> int(100)
      [3]=> int(11)
      [4]=> string(1) "a"
    }
    [1]=> array(5) {
      [0]=> int(1)
      [1]=> int(3)
      [2]=> string(1) "2"
      [3]=> int(2)
      [4]=> int(1)
    }
  }

Sorting database results For this example, each element in the data array
represents one row in a table. This type of dataset is typical of database
records.

Example data:

  volume | edition
  -------+--------
      67 |       2
      86 |       1
      85 |       6
      98 |       2
      86 |       6
      67 |       7

The data as an array, called data. This would usually, for example, be
obtained by looping with |mysql_fetch_assoc|.

<?php >
  $data[] = array('volume' => 67, 'edition' => 2);
  $data[] = array('volume' => 86, 'edition' => 1);
  $data[] = array('volume' => 85, 'edition' => 6);
  $data[] = array('volume' => 98, 'edition' => 2);
  $data[] = array('volume' => 86, 'edition' => 6);
  $data[] = array('volume' => 67, 'edition' => 7);
?>

In this example, we will order by volume descending, edition ascending.

We have an array of rows, but |array_multisort| requires an array of columns,
so we use the below code to obtain the columns, then perform the sorting.

<?php >
  // Obtain a list of columns
  foreach ($data as $key => $row) {
      $volume[$key]  = $row['volume'];
      $edition[$key] = $row['edition'];
  }
  
  // Sort the data with volume descending, edition ascending
  // Add $data as the last parameter, to sort by the common key
  array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>

The dataset is now sorted, and will look like this:

  volume | edition
  -------+--------
      98 |       2
      86 |       1
      86 |       6
      85 |       6
      67 |       2
      67 |       7

Case insensitive sorting Both SORT_STRING and SORT_REGULAR are case sensitive,
strings starting with a capital letter will come before strings starting with
a lowercase letter.

To perform a case insensitive search, force the sorting order to be determined
by a lowercase copy of the original array.

<?php >
  $array = array('Alpha', 'atomic', 'Beta', 'bank');
  $array_lowercase = array_map('strtolower', $array);
  
  array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);
  
  print_r($array);
?>

The above example will output:

  Array
  (
      [0] => Alpha
      [1] => atomic
      [2] => bank
      [3] => Beta
  )

vim:ft=help:
