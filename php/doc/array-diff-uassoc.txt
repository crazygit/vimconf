array_diff_uassoc -- Computes the difference of arrays with additional index
check which is performed by a user supplied callback function

  array array_diff_uassoc(array array1, array array2 [, array ..., callback key_compare_func])~

|array_diff_uassoc| returns an array containing all the values from {array1}
that are not present in any of the other arguments. Note that the keys are
used in the comparison unlike |array_diff|.

This comparison is done by a user supplied callback function. It must return
an integer less than, equal to, or greater than zero if the first argument is
considered to be respectively less than, equal to, or greater than the second.
This is unlike |array_diff_assoc| where an internal function for comparing the
indices is used.

|array_diff_uassoc| example

<?php >
  function key_compare_func($a, $b) 
  {
      if ($a === $b) {
          return 0;
      }
      return ($a > $b)? 1:-1;
  }
  
  $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
  $array2 = array("a" => "green", "yellow", "red");
  $result = array_diff_uassoc($array1, $array2, "key_compare_func");
  print_r($result);
?>

The above example will output:

  Array
  (
      [b] => brown
      [c] => blue
      [0] => red
  )

In our example above you see the "a" => "green" pair is present in both arrays
and thus it is not in the ouput from the function. Unlike this, the pair 0 =>
"red" is in the ouput because in the second argument "red" has key which is
1.

The equality of 2 indices is checked by the user supplied callback function.

Please note that this function only checks one dimension of a n-dimensional
array. Of course you can check deeper dimensions by using, for example,
array_diff_uassoc($array1[0], $array2[0], "key_compare_func");.

See also |array_diff|, |array_diff_assoc|, |array_udiff|, |array_udiff_assoc|,
|array_udiff_uassoc|, |array_intersect|, |array_intersect_assoc|,
|array_uintersect|, |array_uintersect_assoc| and |array_uintersect_uassoc|.

vim:ft=help:
