PDO::prepare -- Prepares a statement for execution and returns a statement
object

  PDOStatement PDO::prepare(string statement [, array driver_options])~

This function is EXPERIMENTAL. The behaviour of this function, the name of
this function, and anything else documented about this function may change
without notice in a future release of PHP. Use this function at your own
risk.

Prepares an SQL statement to be executed by the |PDOStatement::execute|
method. The SQL statement can contain zero or more named (:name) or question
mark (?) parameter markers for which real values will be substituted when the
statement is executed. You cannot use both named and question mark parameter
markers within the same SQL statement; pick one or the other parameter style.

Calling |PDO::prepare| and |PDOStatement::execute| for statements that will be
issued multiple times with different parameter values optimizes the
performance of your application by allowing the driver to negotiate client
and/or server side caching of the query plan and meta information, and helps
to prevent SQL injection attacks by eliminating the need to manually quote
the parameters.

PDO will emulate prepared statements/bound parameters for drivers that do not
natively support them, and can also rewrite named or question mark style
parameter markers to something more appropriate, if the driver supports one
style but not the other.

{statement} This must be a valid SQL statement for the target database server.

{driver_options} This array holds one or more key=>value pairs to set
attribute values for the PDOStatement object that this method returns. You
would most commonly use this to set the PDO_ATTR_CURSOR value to
PDO_CURSOR_SCROLL to request a scrollable cursor. Some drivers have driver
specific options that may be set at prepare-time.

If the database server successfully prepares the statement, |PDO::prepare|
returns a PDOStatement object.

Prepare an SQL statement with named parameters

<?php >
  /* Execute a prepared statement by passing an array of values */
  $sql = 'SELECT name, colour, calories
      FROM fruit
      WHERE calories < :calories AND colour = :colour';
  $sth = $dbh->prepare($sql, array(PDO_ATTR_CURSOR, PDO_CURSOR_FWDONLY));
  $sth->execute(array(':calories' => 150, ':colour' => 'red'));
  $red = $sth->fetchAll();
  $sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
  $yellow = $sth->fetchAll();
?>

Prepare an SQL statement with question mark parameters

<?php >
  /* Execute a prepared statement by passing an array of values */
  $sth = $dbh->prepare('SELECT name, colour, calories
      FROM fruit
      WHERE calories < ? AND colour = ?');
  $sth->execute(array(150, 'red'));
  $red = $sth->fetchAll();
  $sth->execute(array(175, 'yellow'));
  $yellow = $sth->fetchAll();
?>

|PDO::exec| |PDO::query| |PDOStatement::execute|

vim:ft=help:
