ifx_prepare -- Prepare an SQL-statement for execution

  int ifx_prepare(string query, int conn_id [, int cursor_def, mixed blobidarray])~

Returns an integer {result_id} for use by |ifx_do|. Sets {affected_rows} for
retrieval by the |ifx_affected_rows| function.

Prepares {query} on connection {conn_id}. For "select-type" queries a cursor
is declared and opened. The optional {cursor_type} parameter allows you to
make this a "scroll" and/or "hold" cursor. It's a bitmask and can be either
IFX_SCROLL, IFX_HOLD, or both or'ed together.

For either query type the estimated number of affected rows is saved for
retrieval by |ifx_affected_rows|.

If you have BLOB (BYTE or TEXT) columns in the query, you can add a
{blobidarray} parameter containing the corresponding "blob ids", and you
should replace those columns with a "?" in the query text.

If the contents of the TEXT (or BYTE) column allow it, you can also use
"ifx_textasvarchar(1)" and "ifx_byteasvarchar(1)". This allows you to treat
TEXT (or BYTE) columns just as if they were ordinary (but long) VARCHAR
columns for select queries, and you don't need to bother with blob id's.

With ifx_textasvarchar(0) or ifx_byteasvarchar(0) (the default situation),
select queries will return BLOB columns as blob id's (integer value). You can
get the value of the blob as a string or file with the blob functions (see
below).

See also: |ifx_do|.

vim:ft=help:
